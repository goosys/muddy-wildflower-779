# Loco configuration file documentation

# Application logging configuration
logger:
  # Enable or disable logging.
  enable: true
  # Log level, options: trace, debug, info, warn or error.
  level: debug
  # Define the logging format. options: compact, pretty or json
  format: compact
  # By default the logger has filtering only logs that came from your code or logs that came from `loco` framework. to see all third party libraries
  # Uncomment the line below to override to see all third party libraries you can enable this config and override the logger filters.
  # override_filter: trace

# Web server configuration
server:
  # Port on which the server will listen. the server binding is 0.0.0.0:{PORT}
  port: 5150
  # The UI hostname or IP address that mailers will point to.
  host: http://localhost
  # Out of the box middleware configuration. to disable middleware you can changed the `enable` field to `false` of comment the middleware block
  middlewares:
    # Enable Etag cache header middleware
    etag:
      enable: true
    # Allows to limit the payload size request. payload that bigger than this file will blocked the request.
    limit_payload:
      # Enable/Disable the middleware.
      enable: true
      # the limit size. can be b,kb,kib,mb,mib,gb,gib
      body_limit: 5mb
    # set secure headers
    secure_headers:
      preset: github
    # calculate remote IP based on `X-Forwarded-For` when behind a proxy or load balancer
    # use RemoteIP(..) extractor to get the remote IP.
    # without this middleware, you'll get the proxy IP instead.
    # For more: https://github.com/rails/rails/blob/main/actionpack/lib/action_dispatch/middleware/remote_ip.rb
    #
    # NOTE! only enable when under a proxy, otherwise this can lead to IP spoofing vulnerabilities
    # trust me, you'll know if you need this middleware.
    remote_ip:
      enable: false
      # # replace the default trusted proxies:
      # trusted_proxies:
      # - ip range 1
      # - ip range 2 ..
    # Generating a unique request ID and enhancing logging with additional information such as the start and completion of request processing, latency, status code, and other request details.
    logger:
      # Enable/Disable the middleware.
      enable: true
    # when your code is panicked, the request still returns 500 status code.
    catch_panic:
      # Enable/Disable the middleware.
      enable: true
    # Timeout for incoming requests middleware. requests that take more time from the configuration will cute and 408 status code will returned.
    timeout_request:
      # Enable/Disable the middleware.
      enable: false
      # Duration time in milliseconds.
      timeout: 5000
